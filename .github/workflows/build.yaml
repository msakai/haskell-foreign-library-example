on: [push, pull_request]
name: build-stack
jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        ghc: ['9.2.3', '9.0.2', '8.10.7']
        include:
          - ghc: '9.2.3'
            resolver: nightly-2022-07-23
          - ghc: '9.0.2'
            resolver: lts-19.16
          - ghc: '8.10.7'
            resolver: lts-18.28
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: haskell/actions/setup@v1
        name: Setup Haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          enable-stack: true
          stack-version: 'latest'

      # https://github.com/commercialhaskell/stack/issues/5405
      - name: Clear setup-exe-cache directory
        if: runner.os == 'macOS'
        continue-on-error: true
        run: rm -r ~/.stack/setup-exe-cache

      - name: Build
        shell: bash
        run: |
          echo "resolver: ${{ matrix.resolver }}" > stack.yaml
          echo "system-ghc: true" >> stack.yaml
          stack build

      - name: Check foreign library dependencies
        continue-on-error: true
        shell: bash
        run: |
          if [[ ${{ runner.os }} = "macOS" ]]; then
            otool -L `stack path --local-install-root`/lib/libexample.dylib
          elif [[ ${{ runner.os }} = "Windows" ]]; then          
            ldd `stack path --local-install-root`/lib/example.dll
          else
            ldd `stack path --local-install-root`/lib/libexample.so
          fi

      - name: Test calling the foreign library
        shell: bash
        run: |
          stack exec -- gcc -Wall -Ilib test.c -L`stack path --local-install-root`/lib -lexample -o test
          if [[ ${{ runner.os }} = "macOS" ]]; then
            install_name_tool -add_rpath `stack path --local-install-root`/lib test
          elif [[ ${{ runner.os }} = "Windows" ]]; then
            export PATH=$(cygpath -u $(stack path --local-install-root))/lib:$PATH
          else
            export LD_LIBRARY_PATH=`stack path --local-install-root`/lib:$LD_LIBRARY_PATH
          fi
          ./test
